Index: modules/contrib/entity_browser/js/entity_browser.multi_step_display.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/modules/contrib/entity_browser/js/entity_browser.multi_step_display.js b/modules/contrib/entity_browser/js/entity_browser.multi_step_display.js
--- a/modules/contrib/entity_browser/js/entity_browser.multi_step_display.js	(revision db4e5586eaca6495dff8292cc13aaeaac2a321f0)
+++ b/modules/contrib/entity_browser/js/entity_browser.multi_step_display.js	(date 1646935633776)
@@ -2,7 +2,7 @@
  * @file entity_browser.multi_step_display.js
  */
 
-(function ($, Drupal) {
+(function ($, Drupal, Sortable) {
 
   'use strict';
 
@@ -10,12 +10,26 @@
    * Registers behaviours related to selected entities.
    */
   Drupal.behaviors.entityBrowserMultiStepDisplay = {
+
+    /**
+     * Counter for proxy elements when adding items to selection.
+     *
+     * @see Drupal.entityBrowserMultiStepDisplay.addEntities
+     */
+    uuid: 1,
+
     attach: function (context) {
+      var sortableSelector = context.querySelectorAll('.entities-list');
+      sortableSelector.forEach(function (widget) {
+        Sortable.create(widget, {
+          draggable: '.item-container',
+          onEnd: function onEnd() {
+            return Drupal.entityBrowserMultiStepDisplay.entitiesReordered(widget);
+          }
+        });
+      });
+
       var $entities = $(context).find('.entities-list');
-      $entities.sortable({
-        stop: Drupal.entityBrowserMultiStepDisplay.entitiesReordered
-      });
-
       // Register add/remove entities event handlers.
       $entities.once('register-add-entities')
         .bind('add-entities', Drupal.entityBrowserMultiStepDisplay.addEntities);
@@ -61,13 +75,11 @@
   /**
    * Reacts on sorting of the entities.
    *
-   * @param {object} event
-   *   Event object.
-   * @param {object} ui
-   *   Object with detailed information about the sort event.
+   * @param {object} widget
+   *   Object with the sortable area.
    */
-  Drupal.entityBrowserMultiStepDisplay.entitiesReordered = function (event, ui) {
-    var items = $(this).find('.item-container');
+  Drupal.entityBrowserMultiStepDisplay.entitiesReordered = function (widget) {
+    var items = $(widget).find('.item-container');
     for (var i = 0; i < items.length; i++) {
       $(items[i]).find('.weight').val(i);
     }
@@ -121,7 +133,7 @@
 
     for (i = 0; i < entity_ids.length; i++) {
       // Add proxy element that will be replaced with returned Ajax Command.
-      var proxy_element = $('<div></div>').uniqueId();
+      var proxy_element = $('<div></div>').attr("id", "ui-id-" + ( ++Drupal.behaviors.entityBrowserMultiStepDisplay.uuid ));
       entities_list.append(proxy_element);
 
       Drupal.entityBrowserCommandQueue.queueCommand(
@@ -136,4 +148,4 @@
     entities_list.siblings('[name=ajax_commands_handler]').trigger('execute-commands', [true]);
   };
 
-}(jQuery, Drupal));
+}(jQuery, Drupal, Sortable));
Index: modules/contrib/entity_browser/entity_browser.libraries.yml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/modules/contrib/entity_browser/entity_browser.libraries.yml b/modules/contrib/entity_browser/entity_browser.libraries.yml
--- a/modules/contrib/entity_browser/entity_browser.libraries.yml	(revision db4e5586eaca6495dff8292cc13aaeaac2a321f0)
+++ b/modules/contrib/entity_browser/entity_browser.libraries.yml	(date 1646935704332)
@@ -51,7 +51,7 @@
   dependencies:
     - entity_browser/common
     - entity_browser/entity_list
-    - core/jquery.ui.sortable
+    - core/sortable
 
 file_browser:
   version: VERSION
@@ -105,4 +105,4 @@
     js/entity_browser.multi_step_display.js: {}
   dependencies:
     - entity_browser/entity_list
-    - core/jquery.ui.sortable
+    - core/sortable
Index: modules/contrib/entity_browser/js/entity_browser.entity_reference.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/modules/contrib/entity_browser/js/entity_browser.entity_reference.js b/modules/contrib/entity_browser/js/entity_browser.entity_reference.js
--- a/modules/contrib/entity_browser/js/entity_browser.entity_reference.js	(revision db4e5586eaca6495dff8292cc13aaeaac2a321f0)
+++ b/modules/contrib/entity_browser/js/entity_browser.entity_reference.js	(date 1646935633764)
@@ -5,7 +5,7 @@
  * browser.
  */
 
-(function ($, Drupal) {
+(function ($, Drupal, Sortable) {
 
   'use strict';
 
@@ -14,9 +14,13 @@
    */
   Drupal.behaviors.entityBrowserEntityReference = {
     attach: function (context) {
-      $(context).find('.field--widget-entity-browser-entity-reference').each(function () {
-        $(this).find('.entities-list.sortable').sortable({
-          stop: Drupal.entityBrowserEntityReference.entitiesReordered
+      var sortableSelector = context.querySelectorAll('.field--widget-entity-browser-entity-reference .entities-list.sortable');
+      sortableSelector.forEach(function (widget) {
+        Sortable.create(widget, {
+          draggable: '.item-container',
+          onEnd: function onEnd() {
+            return Drupal.entityBrowserEntityReference.entitiesReordered(widget);
+          }
         });
       });
       // The AJAX callback will give us a flag when we need to re-open the
@@ -42,19 +46,17 @@
   /**
    * Reacts on sorting of the entities.
    *
-   * @param {object} event
-   *   Event object.
-   * @param {object} ui
-   *   Object with detailed information about the sort event.
+   * @param {object} widget
+   *   Object with the sortable area.
    */
-  Drupal.entityBrowserEntityReference.entitiesReordered = function (event, ui) {
-    var items = $(this).find('.item-container');
+  Drupal.entityBrowserEntityReference.entitiesReordered = function (widget) {
+    var items = $(widget).find('.item-container');
     var ids = [];
     for (var i = 0; i < items.length; i++) {
       ids[i] = $(items[i]).attr('data-entity-id');
     }
 
-    $(this).parent().parent().find('input[type*=hidden][name*="[target_id]"]').val(ids.join(' '));
+    $(widget).parent().find('input[type*=hidden][name*="[target_id]"]').val(ids.join(' '));
   };
 
-}(jQuery, Drupal));
+}(jQuery, Drupal, Sortable));
Index: modules/contrib/entity_browser/tests/src/Kernel/Extension/EntityBrowserTest.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/modules/contrib/entity_browser/tests/src/Kernel/Extension/EntityBrowserTest.php b/modules/contrib/entity_browser/tests/src/Kernel/Extension/EntityBrowserTest.php
--- a/modules/contrib/entity_browser/tests/src/Kernel/Extension/EntityBrowserTest.php	(revision db4e5586eaca6495dff8292cc13aaeaac2a321f0)
+++ b/modules/contrib/entity_browser/tests/src/Kernel/Extension/EntityBrowserTest.php	(date 1646935704320)
@@ -128,7 +128,7 @@
         $this->fail('An entity browser without required ' . $plugin_type . ' created with no exception thrown.');
       }
       catch (PluginException $e) {
-        $this->assertContains('The "" plugin does not exist.', $e->getMessage(), 'An exception was thrown when an entity_browser was created without a ' . $plugin_type . ' plugin.');
+        $this->assertStringContainsString('The "" plugin does not exist.', $e->getMessage(), 'An exception was thrown when an entity_browser was created without a ' . $plugin_type . ' plugin.');
       }
     }
 
Index: modules/contrib/entity_browser/tests/src/FunctionalJavascript/EntityReferenceWidgetTest.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/modules/contrib/entity_browser/tests/src/FunctionalJavascript/EntityReferenceWidgetTest.php b/modules/contrib/entity_browser/tests/src/FunctionalJavascript/EntityReferenceWidgetTest.php
--- a/modules/contrib/entity_browser/tests/src/FunctionalJavascript/EntityReferenceWidgetTest.php	(revision db4e5586eaca6495dff8292cc13aaeaac2a321f0)
+++ b/modules/contrib/entity_browser/tests/src/FunctionalJavascript/EntityReferenceWidgetTest.php	(date 1646935633792)
@@ -6,6 +6,7 @@
 use Drupal\entity_browser\Element\EntityBrowserElement;
 use Drupal\field\Entity\FieldConfig;
 use Drupal\field\Entity\FieldStorageConfig;
+use Drupal\FunctionalJavascriptTests\SortableTestTrait;
 use Drupal\node\Entity\Node;
 use Drupal\user\Entity\Role;
 
@@ -16,6 +17,8 @@
  */
 class EntityReferenceWidgetTest extends EntityBrowserWebDriverTestBase {
 
+  use SortableTestTrait;
+
   /**
    * {@inheritdoc}
    */
@@ -337,14 +340,41 @@
    * Tests that drag and drop functions properly.
    */
   public function testDragAndDrop() {
+    $assert_session = $this->assertSession();
 
-    $gatsby = $this->createNode(['type' => 'shark', 'title' => 'Gatsby']);
-    $daisy = $this->createNode(['type' => 'jet', 'title' => 'Daisy']);
-    $nick = $this->createNode(['type' => 'article', 'title' => 'Nick']);
+    $time = time();
 
-    $santa = $this->createNode(['type' => 'shark', 'title' => 'Santa Claus']);
-    $easter_bunny = $this->createNode(['type' => 'jet', 'title' => 'Easter Bunny']);
-    $pumpkin_king = $this->createNode(['type' => 'article', 'title' => 'Pumpkin King']);
+    $gatsby = $this->createNode([
+      'type' => 'shark',
+      'title' => 'Gatsby',
+      'created' => $time--,
+    ]);
+    $daisy = $this->createNode([
+      'type' => 'jet',
+      'title' => 'Daisy',
+      'created' => $time--,
+    ]);
+    $nick = $this->createNode([
+      'type' => 'article',
+      'title' => 'Nick',
+      'created' => $time--,
+    ]);
+
+    $santa = $this->createNode([
+      'type' => 'shark',
+      'title' => 'Santa Claus',
+      'created' => $time--,
+    ]);
+    $easter_bunny = $this->createNode([
+      'type' => 'jet',
+      'title' => 'Easter Bunny',
+      'created' => $time--,
+    ]);
+    $pumpkin_king = $this->createNode([
+      'type' => 'article',
+      'title' => 'Pumpkin King',
+      'created' => $time--,
+    ]);
 
     $field1_storage_config = [
       'field_name' => 'field_east_egg',
@@ -490,8 +520,12 @@
     // Open details 1.
     $this->assertSession()->elementExists('xpath', '(//summary)[1]')->click();
 
-    $first_item = $this->assertSession()->elementExists('xpath', "(//div[contains(@class, 'item-container')])[1]");
-    $this->dragDropElement($first_item, 160, 0);
+    // In the first set of selections, drag the first item into the second
+    // position.
+    $list_selector = '[data-drupal-selector="edit-field-east-egg-current"]';
+    $item_selector = "$list_selector .item-container";
+    $assert_session->elementsCount('css', $item_selector, 3);
+    $this->sortableAfter("$item_selector:first-child", "$item_selector:nth-child(2)", $list_selector);
     $this->waitForAjaxToFinish();
 
     $this->assertSession()->fieldExists('title[0][value]')->setValue('Hello World');
@@ -513,8 +547,12 @@
         ->elementContains('xpath', "(//div[contains(@class, 'item-container')])[" . $key . "]", $value);
     }
 
-    $fourth = $this->assertSession()->elementExists('xpath', "(//div[contains(@class, 'item-container')])[4]");
-    $this->dragDropElement($fourth, 160, 0);
+    // In the second set of selections, drag the first item into the second
+    // position.
+    $list_selector = '[data-drupal-selector="edit-field-east-egg2-current"]';
+    $item_selector = "$list_selector .item-container";
+    $assert_session->elementsCount('css', $item_selector, 3);
+    $this->sortableAfter("$item_selector:first-child", "$item_selector:nth-child(2)", $list_selector);
 
     $correct_order = [
       4 => 'Easter Bunny',
@@ -544,4 +582,16 @@
     }
   }
 
+  /**
+   * {@inheritdoc}
+   */
+  protected function sortableUpdate($item, $from, $to = NULL) {
+    list ($container) = explode(' ', $item, 2);
+
+    $js = <<<END
+Drupal.entityBrowserEntityReference.entitiesReordered(document.querySelector("$container"));
+END;
+    $this->getSession()->executeScript($js);
+  }
+
 }
Index: modules/contrib/entity_browser/tests/src/FunctionalJavascript/ImageFieldTest.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/modules/contrib/entity_browser/tests/src/FunctionalJavascript/ImageFieldTest.php b/modules/contrib/entity_browser/tests/src/FunctionalJavascript/ImageFieldTest.php
--- a/modules/contrib/entity_browser/tests/src/FunctionalJavascript/ImageFieldTest.php	(revision db4e5586eaca6495dff8292cc13aaeaac2a321f0)
+++ b/modules/contrib/entity_browser/tests/src/FunctionalJavascript/ImageFieldTest.php	(date 1646935633800)
@@ -251,7 +251,7 @@
     /** @var \Drupal\file\Entity\File $file */
     $fid = explode(':', $entity_id)[1];
     $file = File::load($fid);
-    $this->assertContains('entity-browser-test', $file->getFileUri());
+    $this->assertStringContainsString('entity-browser-test', $file->getFileUri());
   }
 
 }
Index: modules/contrib/entity_browser/tests/src/FunctionalJavascript/InlineEntityFormTest.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/modules/contrib/entity_browser/tests/src/FunctionalJavascript/InlineEntityFormTest.php b/modules/contrib/entity_browser/tests/src/FunctionalJavascript/InlineEntityFormTest.php
--- a/modules/contrib/entity_browser/tests/src/FunctionalJavascript/InlineEntityFormTest.php	(revision db4e5586eaca6495dff8292cc13aaeaac2a321f0)
+++ b/modules/contrib/entity_browser/tests/src/FunctionalJavascript/InlineEntityFormTest.php	(date 1646935704268)
@@ -2,6 +2,8 @@
 
 namespace Drupal\Tests\entity_browser\FunctionalJavascript;
 
+use Drupal\FunctionalJavascriptTests\SortableTestTrait;
+
 /**
  * Test for integration of entity browser and inline entity form.
  *
@@ -11,6 +13,8 @@
  */
 class InlineEntityFormTest extends EntityBrowserWebDriverTestBase {
 
+  use SortableTestTrait;
+
   /**
    * {@inheritdoc}
    */
@@ -95,8 +99,9 @@
     $this->assertSession()->assertWaitOnAjaxRequest();
 
     // Test reorder of elements.
-    $dragged = $this->xpath("//div[@data-drupal-selector='edit-ief-media-field-form-inline-entity-form-entities-0-form-ief-media-bundle-file-field-current-items-0']")[0];
-    $this->dragDropElement($dragged, 150, 0);
+    $list_selector = '[data-drupal-selector="edit-ief-media-field-form-inline-entity-form-entities-0-form-ief-media-type-file-field-current"]';
+    $item_selector = "$list_selector .item-container";
+    $this->sortableAfter("$item_selector:first-child", "$item_selector:last-child", $list_selector);
     $this->assertSession()->assertWaitOnAjaxRequest();
 
     $page->pressButton('Update Test File Media');
@@ -159,8 +164,9 @@
     $this->getSession()
       ->switchToIFrame('entity_browser_iframe_ief_entity_browser_file');
 
-    $dragged = $this->xpath("//div[@data-drupal-selector='edit-selected-items-2-0']")[0];
-    $this->dragDropElement($dragged, 150, 0);
+    $list_selector = '[data-drupal-selector="edit-selected"]';
+    $item_selector = "$list_selector .item-container";
+    $this->sortableAfter("$item_selector:first-child", "$item_selector:last-child", $list_selector);
     $this->assertSession()->assertWaitOnAjaxRequest();
 
     $page->pressButton('Use selected');
@@ -407,8 +413,20 @@
 
     $ief_table = $this->assertSession()->elementExists('xpath', '//table[contains(@id, "ief-entity-table-edit-field-nodes-entities")]');
     $table_text = $ief_table->getText();
-    $this->assertContains('Boxer', $table_text);
-    $this->assertContains('Napoleon', $table_text);
+    $this->assertStringContainsString('Boxer', $table_text);
+    $this->assertStringContainsString('Napoleon', $table_text);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  protected function sortableUpdate($item, $from, $to = NULL) {
+    list ($container) = explode(' ', $item, 2);
+
+    $js = <<<END
+(Drupal.entityBrowserEntityReference || Drupal.entityBrowserMultiStepDisplay).entitiesReordered(document.querySelector("$container"));
+END;
+    $this->getSession()->executeScript($js);
   }
 
 }
